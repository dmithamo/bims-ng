{
  "version": 3,
  "sources": ["src/app/core/services/icon.service.ts", "src/app/shared/components/svg-icon/svg-icon.component.ts", "src/app/shared/components/svg-icon/svg-icon.component.html", "src/app/shared/components/page-header/page-header.component.ts", "src/app/shared/components/page-header/page-header.component.html"],
  "sourcesContent": ["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { catchError, map, Observable, of } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class IconService {\n  private cache: { [key: string]: string } = {};\n  private ROOT_ICON_PATH = 'assets/icons';\n  constructor(private http: HttpClient) {}\n\n  getIcon(iconName: string): Observable<string> {\n    if (this.cache[iconName]) {\n      return of(this.cache[iconName]);\n    }\n    return this.http\n      .get(`${this.ROOT_ICON_PATH}/${iconName}.svg`, {\n        responseType: 'text',\n      })\n      .pipe(\n        map(svgContent => {\n          this.cache[iconName] = svgContent.trim();\n          return svgContent;\n        }),\n        catchError(() => of('')),\n      );\n  }\n}\n", "import { Component, Input, OnChanges, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { IconService } from '../../../core/services/icon.service';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\n\n@Component({\n  selector: 'app-svg-icon',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './svg-icon.component.html',\n})\nexport class SvgIconComponent implements OnInit, OnChanges {\n  @Input() iconName: string = '';\n  @Input() iconClass: string = '';\n\n  sanitizedSvgContent: SafeHtml | null = null;\n\n  constructor(\n    private iconService: IconService,\n    private sanitizer: DomSanitizer,\n  ) {}\n\n  private fetchIcon(name: string) {\n    this.iconService.getIcon(name).subscribe(svgContent => {\n      this.sanitizedSvgContent = svgContent\n        ? this.sanitizer.bypassSecurityTrustHtml(svgContent)\n        : null;\n    });\n  }\n\n  ngOnInit() {\n    this.fetchIcon(this.iconName);\n  }\n\n  ngOnChanges() {\n    this.fetchIcon(this.iconName);\n  }\n}\n", "@if (sanitizedSvgContent) {\n  <div [class]=\"'w-6 h-6 ' + iconClass\" [innerHTML]=\"sanitizedSvgContent\"></div>\n}\n", "import { Component, Input } from '@angular/core';\nimport { CommonModule, Location } from '@angular/common';\nimport { RouterLink, RouterLinkActive } from '@angular/router';\nimport { SvgIconComponent } from '../svg-icon/svg-icon.component';\n\n@Component({\n  selector: 'app-page-header',\n  standalone: true,\n  imports: [CommonModule, RouterLink, SvgIconComponent, RouterLinkActive],\n  templateUrl: './page-header.component.html',\n})\nexport class PageHeaderComponent {\n  @Input() pageTitle!: string;\n  @Input() hideBackButton?: boolean;\n\n  constructor(private location: Location) {}\n\n  goBack(): void {\n    this.location.back();\n  }\n}\n", "<header class=\"flex justify-between items-center\">\n  <div class=\"flex items-center gap-x-4\">\n    @if (!hideBackButton) {\n      <a\n        routerLink=\"javascript:void(0)\"\n        (click)=\"goBack()\"\n        class=\"text-secondary-100 flex items-center -ml-2\">\n        <app-svg-icon iconName=\"chevron-left\" iconClass=\"w-6 h-6\" />\n        <span>Back</span>\n      </a>\n    }\n\n    <h1 class=\"text-3xl\">{{ pageTitle }}</h1>\n  </div>\n</header>\n"],
  "mappings": "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",
  "names": ["IconService", "constructor", "http", "cache", "ROOT_ICON_PATH", "getIcon", "iconName", "of", "get", "responseType", "pipe", "map", "svgContent", "trim", "catchError", "\u0275\u0275inject", "HttpClient", "factory", "\u0275fac", "providedIn", "i0", "\u0275\u0275element", "\u0275\u0275classMap", "ctx_r0", "iconClass", "\u0275\u0275property", "sanitizedSvgContent", "\u0275\u0275sanitizeHtml", "SvgIconComponent", "constructor", "iconService", "sanitizer", "iconName", "fetchIcon", "name", "getIcon", "subscribe", "svgContent", "bypassSecurityTrustHtml", "ngOnInit", "ngOnChanges", "\u0275\u0275directiveInject", "IconService", "DomSanitizer", "selectors", "inputs", "standalone", "features", "\u0275\u0275NgOnChangesFeature", "\u0275\u0275StandaloneFeature", "decls", "vars", "consts", "template", "SvgIconComponent_Template", "rf", "ctx", "\u0275\u0275template", "SvgIconComponent_Conditional_0_Template", "\u0275\u0275conditional", "CommonModule", "encapsulation", "i0", "\u0275\u0275elementStart", "\u0275\u0275listener", "PageHeaderComponent_Conditional_2_Template_a_click_0_listener", "\u0275\u0275restoreView", "_r2", "ctx_r1", "\u0275\u0275nextContext", "\u0275\u0275resetView", "goBack", "\u0275\u0275element", "\u0275\u0275text", "\u0275\u0275elementEnd", "PageHeaderComponent", "constructor", "location", "back", "\u0275\u0275directiveInject", "Location", "selectors", "inputs", "pageTitle", "hideBackButton", "standalone", "features", "\u0275\u0275StandaloneFeature", "decls", "vars", "consts", "template", "PageHeaderComponent_Template", "rf", "ctx", "\u0275\u0275template", "PageHeaderComponent_Conditional_2_Template", "\u0275\u0275advance", "\u0275\u0275conditional", "\u0275\u0275textInterpolate", "CommonModule", "RouterLink", "SvgIconComponent", "encapsulation"]
}

{
  "version": 3,
  "sources": ["src/app/shared/components/logo/logo.component.ts", "src/app/shared/components/logo/logo.component.html", "src/environments/environment.ts", "src/app/shared/components/main-footer/main-footer.component.ts", "src/app/shared/components/main-footer/main-footer.component.html", "src/app/_services/storage/storage.service.ts", "src/app/_repositories/auth/auth.repository.ts", "src/app/_services/auth/auth.service.ts"],
  "sourcesContent": ["import { Component, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SvgIconComponent } from '../svg-icon/svg-icon.component';\nimport { RouterLink } from '@angular/router';\nimport { APP_ROUTE } from '../../constants/routes.constants';\n\n@Component({\n  selector: 'app-logo',\n  standalone: true,\n  imports: [CommonModule, SvgIconComponent, RouterLink],\n  templateUrl: './logo.component.html',\n})\nexport class LogoComponent {\n  @Input() disableClick?: boolean = false;\n  protected readonly APP_ROUTE = APP_ROUTE;\n}\n", "<a\n  [routerLink]=\"disableClick ? undefined : ['/', APP_ROUTE.dashboard]\"\n  class=\"flex items-center gap-4 text-6xl font-bold text-accent\">\n  <span class=\"font-chronos\">b</span>\n  <span class=\"scale-115\">&#x2970;</span>\n  <span class=\"font-chronos\">ms</span>\n</a>\n", "export const environment = {\n  // This is automatically rewritten by the update-version command via Git hooks\n  version: '1667dd6',\n\n  env: 'development',\n  apiURL: 'https://api.example-development.com',\n};\n", "import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { environment } from '../../../../environments/environment';\nimport { LogoComponent } from '../logo/logo.component';\n\n@Component({\n  selector: 'app-main-footer',\n  standalone: true,\n  imports: [CommonModule, LogoComponent],\n  templateUrl: './main-footer.component.html',\n})\nexport class MainFooterComponent {\n  public appVersion = environment.version;\n}\n", "<footer class=\"w-full p-6 text-slate-400 bg-slate-100\">\n  <app-logo />\n  <small\n    >Â© 2023&nbsp;<a\n      target=\"_blank\"\n      rel=\"noreferrer\"\n      href=\"https://github.com/dmithamo\"\n      >D Mithamo</a\n    ></small\n  >\n  <br />\n  <small>\n    (You are running version\n    <span class=\"border-b border-b-slate-400 border-dotted\">{{\n      appVersion\n    }}</span\n    >)\n  </small>\n</footer>\n", "import { Injectable } from '@angular/core';\nimport { SessionId } from '../../shared/models/auth.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class StorageService {\n  private STORAGE_TYPE: Storage = localStorage;\n  public sessionId: SessionId | null = null;\n  constructor() {}\n\n  public get(key: string): SessionId | null {\n    const item = this.STORAGE_TYPE.getItem(key);\n    if (item) {\n      return JSON.parse(item);\n    }\n\n    return null;\n  }\n\n  public set(key: string, value: string): void {\n    this.STORAGE_TYPE.setItem(key, JSON.stringify(value));\n  }\n\n  public remove(key: string): void {\n    this.STORAGE_TYPE.removeItem(key);\n  }\n\n  public clear(): void {\n    this.STORAGE_TYPE.clear();\n  }\n}\n", "import { Injectable } from '@angular/core';\nimport { StorageService } from '../../_services/storage/storage.service';\nimport {\n  Credentials,\n  SessionId,\n  SessionUser,\n} from '../../shared/models/auth.model';\nimport { UUID } from '../../shared/utils/types';\n\nconst SESSION_ID_KEY = 'SESSION_ID';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthRepository {\n  constructor(private storageService: StorageService) {}\n\n  get sessionId(): SessionId | null {\n    return this.storageService.get(SESSION_ID_KEY);\n  }\n\n  async getSessionUser(): Promise<SessionUser | null> {\n    const sessionId = this.sessionId;\n    if (!sessionId) {\n      return null;\n    }\n\n    return Promise.resolve(null);\n  }\n\n  removeSessionId() {\n    this.storageService.remove(SESSION_ID_KEY);\n  }\n\n  async login({ username, password }: Credentials): Promise<SessionUser> {\n    // TODO: api login here\n    console.info({ password });\n    return Promise.resolve({\n      username,\n      permissions: [],\n    });\n  }\n\n  createPassword(password: string, token: UUID) {\n    // TODO: api create password here\n    console.info(`New password created: ${password}::${token}`);\n  }\n\n  requestPasswordResetLink(username: string) {\n    // TODO: api generate token\n    // TODO: email service sends token\n    console.info(`Link sent! ${username}`);\n  }\n}\n", "import { computed, Injectable, signal, WritableSignal } from '@angular/core';\nimport { AuthRepository } from '../../_repositories/auth/auth.repository';\nimport { Credentials, SessionUser } from '../../shared/models/auth.model';\nimport { UUID } from '../../shared/utils/types';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  public sessionUser: WritableSignal<SessionUser | null> = signal(null);\n  public isLoggedIn = computed<boolean>(() => {\n    return !!this.sessionUser();\n  });\n\n  constructor(private authRepository: AuthRepository) {\n    this.validateSessionId();\n  }\n\n  public async validateSessionId(): Promise<void> {\n    const sessionId = this.authRepository.sessionId;\n    if (!sessionId) {\n      await this.logout();\n      return;\n    }\n\n    this.sessionUser.set(await this.authRepository.getSessionUser());\n  }\n\n  public async login({ username, password }: Credentials) {\n    this.sessionUser.set(\n      await this.authRepository.login({\n        username,\n        password,\n      }),\n    );\n  }\n\n  public async logout(): Promise<void> {\n    this.authRepository.removeSessionId();\n    this.sessionUser.set(null);\n  }\n\n  public async requestPasswordResetLink(username: string) {\n    this.authRepository.requestPasswordResetLink(username);\n  }\n\n  public async createPassword(password: string, token: UUID) {\n    this.authRepository.createPassword(password, token);\n  }\n}\n"],
  "mappings": "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",
  "names": ["LogoComponent", "constructor", "disableClick", "APP_ROUTE", "selectors", "inputs", "standalone", "features", "\u0275\u0275StandaloneFeature", "decls", "vars", "consts", "template", "LogoComponent_Template", "rf", "ctx", "i0", "\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275property", "undefined", "\u0275\u0275pureFunction1", "_c0", "dashboard", "CommonModule", "RouterLink", "encapsulation", "environment", "version", "env", "apiURL", "MainFooterComponent", "constructor", "appVersion", "environment", "version", "selectors", "standalone", "features", "\u0275\u0275StandaloneFeature", "decls", "vars", "consts", "template", "MainFooterComponent_Template", "rf", "ctx", "i0", "\u0275\u0275elementStart", "\u0275\u0275element", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275textInterpolate", "CommonModule", "LogoComponent", "encapsulation", "StorageService", "constructor", "STORAGE_TYPE", "localStorage", "sessionId", "get", "key", "item", "getItem", "JSON", "parse", "set", "value", "setItem", "stringify", "remove", "removeItem", "clear", "factory", "\u0275fac", "providedIn", "SESSION_ID_KEY", "AuthRepository", "constructor", "storageService", "sessionId", "get", "getSessionUser", "Promise", "resolve", "removeSessionId", "remove", "login", "username", "password", "console", "info", "permissions", "createPassword", "token", "requestPasswordResetLink", "\u0275\u0275inject", "StorageService", "factory", "\u0275fac", "providedIn", "AuthService", "constructor", "authRepository", "sessionUser", "signal", "isLoggedIn", "computed", "validateSessionId", "sessionId", "logout", "set", "getSessionUser", "login", "username", "password", "removeSessionId", "requestPasswordResetLink", "createPassword", "token", "\u0275\u0275inject", "AuthRepository", "factory", "\u0275fac", "providedIn"]
}
